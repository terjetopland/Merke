@page "/Races"
@using BlazorApp.Services
@using BlazorApp.Models
@using BlazorApp.Dtos
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Razor.TagHelpers
@inject IParticipantService Service
@inject IRaceService RaceService
@inject IUserService UserService

<h3>Races</h3>
<button class="btn btn-primary" @onclick="AddRace">Register new race</button>
<input @bind="_name"/>

<div class="container">
    <table class="table" style="margin-top: 10px;">
        <thead>
        <!-- Should be hided if there is no races -->
        <tr>
            <th>Race id</th>
            <th>Race name</th>
            <th>Start time</th>
        </tr>
        </thead>
        <tbody>
            @{
                foreach (var race in _races)
                {
                    <tr>
                        <td>@race.Id</td>
                        <td>@race.Name</td>
                        <td>@race.StartRace</td>
                        <td class="border-bottom-0 border-top-0"><button @onclick="() => ViewResult(race.Id)" class="btn btn-primary">Show result</button></td>
                        
                        @if (race.StartRace is null)
                        {
                            <td class="border-bottom-0 border-top-0"><button @onclick="() => StartRace(race.Id)" class="btn btn-primary">Start Race</button></td>
                        }
                        @if (race.EndRace is null && race.StartRace is not null)
                        {
                            <td class="border-bottom-0 border-top-0"><button @onclick="() => EndRace(race.Id)" class="btn btn-primary">End Race</button></td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<hr/>
<div class="container">
    <div class="row">
        <div class="col-sm-6">
            @{
                if (_raceSwitchOn)
                {
                    <h3>Participants in race @_currentRaceId</h3>
                    <table class="table-bordered table-responsive">
                        <tbody>
                        <tr>
                            <th>Participant id</th>
                            <th>Full name</th>
                            <th>Result</th>
                        </tr>
                        @foreach (var participant in _participants)
                        {
                            <tr>
                                <td>@participant.Id</td>
                                <td>@participant.Name</td>
                                <td>@participant.Result</td>
                            </tr>
                        }

                        </tbody>
                    </table>
                }
            }
        </div>
        
        
        <div class="col-sm-6">
            <button @onclick="GetUsers" class="btn btn-primary">Show all users</button>
            @{
                if (_usersSwitchOn)
                {
                    <h3>All users</h3>
                    <table class="table-bordered table-responsive">
                        <tbody>
                        @foreach (var user in _users)
                        {
                            <tr>
                                <td>@user.Name</td>
                                <td>@user.DateOfBirth</td>
                                <td><button @onclick="() => SetParticipant(user.Id)" class="btn btn-primary">Add</button></td>
                            </tr>
                        }

                        </tbody>
                    </table>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<ParticipantDto> _participants = new List<ParticipantDto>();
    private List<Race> _races = new List<Race>();
    private List<AppUser> _users = new List<AppUser>();
    private string _name = String.Empty;
    private int _currentRaceId;
    private bool _usersSwitchOn = false;
    private bool _raceSwitchOn = false;

    protected override void OnInitialized()
    {
        _races = RaceService.GetRaces();
        //var race = RaceService.GetRace();
        //_participants = Service.GetParticipants(race.Id);
    }

    private void AddRace()
    {
       RaceService.AddRace(_name); 
    }

    private void StartRace(int raceId)
    {
        RaceService.StartRace(raceId);

    }

    private void EndRace(int raceId)
    {
        RaceService.EndRace(raceId);
    }
    

    private void ViewResult(int raceId)
    {
        var race = RaceService.GetRace(raceId);
        var previousRaceId = _currentRaceId;
        _currentRaceId = race.Id;
        _participants = Service.GetParticipants(race.Id);
        ViewRaceHeading(previousRaceId);
    }

    private void GetUsers()
    {
        _users = UserService.GetUsers();
        if (_usersSwitchOn)
            _usersSwitchOn = false;
        else
            _usersSwitchOn = true;

    }

    private void SetParticipant(string userId)
    {
        Service.AddParticipant(userId, _currentRaceId);
    }

    private void ViewRaceHeading(int prevRaceId)
    {
        if (prevRaceId == _currentRaceId)
        {
            if (_raceSwitchOn)
                _raceSwitchOn = false;
        }
        else
            _raceSwitchOn = true;
        
    }
}
