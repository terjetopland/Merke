@page "/Races"

@using BlazorApp.Services
@using BlazorApp.Models
@using BlazorApp.Dtos

@inject IParticipantService Service
@inject IRaceService RaceService
@inject IUserService UserService

<h3>Races</h3>
<button class="btn btn-primary" @onclick="AddRace">Register new race</button>
<input @bind="_name"/>

<div class="container">
    <div class="row">

        <div class="col-md-7">
            <table class="table table-striped mt-1">
                <thead>
                <!-- Should be hided if there is no races -->
                <tr>
                    <th>Race id</th>
                    <th>Race name</th>
                    <th>Start time</th>
                    <th colspan="4"></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var race in _races)
                {
                    <tr>
                        <td>@race.Id</td>
                        <td>@race.Name</td>
                        <td>@race.StartRace</td>
                        <td>
                            <button @onclick="() => ViewResult(race.Id)" class="btn btn-primary">
                                @if (race.StartRace is not null)
                                {
                                    <div>View result</div> 
                                }
                                else
                                {
                                    <div>View Participants</div> 
                                }
                            </button>
                        </td>
                        <td>   
                             @if (race.StartRace is null)
                             {
                                 <button @onclick="() => StartRace(race.Id)" class="btn btn-primary">Start Race</button>
                             }   
                             @if (race.EndRace is null && race.StartRace is not null)
                             {
                                 <button @onclick="() => EndRace(race.Id)" class="btn btn-dark">End Race</button>
                             }
                        </td> 
                        <td>
                            <button @onclick="() => DeleteRace(race.Id)" class="btn btn-danger">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
       
        @* users *@
        <div class="col-md-5">
            @if (_raceSwitchOn)
            {
                <h3>Participants in race @_currentRaceId</h3>
                <table class="table table-bordered table-responsive">
                    <tbody>
                    <tr>
                        <th>Participant id</th>
                        <th>Full name</th>
                        <th>Result</th>
                    </tr>
                    @foreach (var participant in _participants)
                    {
                        <tr>
                            <td>@participant.Id</td>
                            <td>@participant.Name</td>
                            @if (participant.EndTime == DateTime.MaxValue)
                            {
                                <td>Did not finish</td>
                            }
                            else
                            {
                                <!-- Thanks to Ã…dne-Sigurd Leirdal I got the right format-->
                                <td>@participant.Result.GetValueOrDefault().ToString(@"hh\:mm\:ss")</td>
                            }      
                            
                            <td><button @onclick="() => DeleteParticipant(participant.Id, _currentRaceId)" class="btn btn-info">Delete participant</button></td>
                        </tr>
                    }
                    </tbody>
                </table>
            }

            <button @onclick="GetUsers" class="btn btn-primary">Show all users</button>
            @if (_usersSwitchOn)
            {
                <h3>All users</h3>
                <table class="table table-bordered table-responsive">
                    <thead>
                    <tr>
                        <th>Full name</th>
                        <th>Emaild</th>
                        <th>Date of Birth</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var user in _users)
                    {
                        UserIsParticipantInRace(user.Id, _currentRaceId);
                        
                        <tr>
                            <td>@(string.IsNullOrWhiteSpace(user.Name) ? "<No name>" : user.Name)</td>
                            <td>@user.Email</td>
                            <td>@(user.DateOfBirth is null ? "<Not set>" : user.DateOfBirth)</td>
                            @if (_currentRaceId != 0 && !_userIsParticipant)
                            {
                                <td>
                                    <button @onclick="() => SetParticipant(user.Id)" class="btn btn-primary">Add to race @_currentRaceId</button>
                                </td> 
                            }
                            
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
        
    </div>
</div>

@code {
    private List<ParticipantDto> _participants = new();
    private List<Race> _races = new();
    private List<AppUser> _users = new();
    private string _name = string.Empty;
    private int _currentRaceId;
    private bool _usersSwitchOn;
    private bool _raceSwitchOn;
    private bool _userIsParticipant;

    protected override void OnInitialized() // OnInitialized: what should happen when the component is initialized
    {
        FetchRaces();
    //var race = RaceService.GetRace();
    //_participants = Service.GetParticipants(race.Id);
    }

    private void FetchRaces()
    {
        _races = RaceService.GetRaces();
    }

    private void AddRace()
    {
        RaceService.AddRace(_name);
        FetchRaces();
    }

    private void DeleteRace(int raceId)
    {
        RaceService.Delete(raceId);
        FetchRaces();
    }

    private void StartRace(int raceId)
    {
        RaceService.StartRace(raceId);
    }

    private void EndRace(int raceId)
    {
        RaceService.EndRace(raceId);
        UpdateResult(raceId);
    }

    private void ViewResult(int raceId)
    {
        var race = RaceService.GetRace(raceId);
        var previousRaceId = _currentRaceId;
        _currentRaceId = race.Id;
        _participants = Service.GetParticipants(race.Id);
        ViewRaceHeading(previousRaceId);
    }
    private void UpdateResult(int raceId)
    {
        var race = RaceService.GetRace(raceId);
        _participants = Service.GetParticipants(race.Id);
        
    }

    private void GetUsers()
    {
        _users = UserService.GetUsers();
        _usersSwitchOn = !_usersSwitchOn;
    }

    private void SetParticipant(string userId)
    {
        Service.AddParticipant(userId, _currentRaceId);
        UpdateResult(_currentRaceId);
    }

    private void DeleteParticipant(int participantId, int raceId)
    {
        Service.DeleteParticipant(participantId, raceId);
        UpdateResult(raceId);
    }

    private void ViewRaceHeading(int prevRaceId)
    {
        if (prevRaceId == _currentRaceId)
        {
            _raceSwitchOn = !_raceSwitchOn;
        }
        else
            _raceSwitchOn = true;
    }

    private void UserIsParticipantInRace(string userId, int raceId)
    {
        var currentParticipants = Service.GetParticipantUsersInRace(raceId);

        var userIsParticipant =  currentParticipants.FirstOrDefault(u => u.User?.Id == userId);

        if (userIsParticipant is not null)
        {
            _userIsParticipant = true;
        }
        else
        {
            _userIsParticipant = false;
        }
        
    }
    }

